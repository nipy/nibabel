
parameters:
  name: ''
  vmImage: ''
  matrix: []

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    EXTRA_WHEELS: "https://5cf40426d9f06eb7461d-6fe47d9331aba7cd62fc36c7196769e4.ssl.cf2.rackcdn.com"
    DEPENDS: numpy scipy matplotlib h5py pydicom
    CHECK_TYPE: test
  strategy:
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(PYTHON_VERSION)'
        addToPath: true
        architecture: '$(PYTHON_ARCH)'
    - script: |
        echo %PYTHONHASHSEED%
      displayName: 'Display hash seed'
    - script: |
        python -m pip install --upgrade pip setuptools>=30.3.0 wheel
      displayName: 'Update build tools'
    - script: |
        python -m pip install --find-links %EXTRA_WHEELS% %DEPENDS%
        python -m pip install nose coverage codecov pytest pytest-cov
      displayName: 'Install dependencies'
    - script: |
        python -m pip install .[$(CHECK_TYPE)]
        SET NIBABEL_DATA_DIR=%CD%\\nibabel-data
      displayName: 'Install nibabel'
    - script: |
        mkdir for_testing
        cd for_testing
        cp ../.coveragerc .
        nosetests --with-doctest --with-coverage --cover-package nibabel nibabel ^
          -I test_data ^
          -I test_environment ^
          -I test_euler ^
          -I test_giftiio ^
          -I test_netcdf ^
          -I test_pkg_info ^
          -I test_quaternions ^
          -I test_scaling ^
          -I test_scripts ^
          -I test_spaces ^
          -I test_testing
      displayName: 'Nose tests'
      condition: and(succeeded(), eq(variables['CHECK_TYPE'], 'nosetests'))
    - script: |
        mkdir for_testing
        cd for_testing
        cp ../.coveragerc .
        pytest --doctest-modules --cov nibabel -v --pyargs nibabel
      displayName: 'Pytest tests'
      condition: and(succeeded(), eq(variables['CHECK_TYPE'], 'test'))
    - script: |
        cd for_testing
        codecov
      displayName: 'Upload To Codecov'
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
